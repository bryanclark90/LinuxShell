//	this program runs on a created linux fd image and simulates a simple linux shell

void init(void);
int get_block(int fd, int blk, char *buf);
int put_block(int fd, int blk, char *buf);
unsigned long getino(int* device1, char* pathname);
unsigned long search(MINODE* mip, char* name);
MINODE *iget(int dev,int ino);
MINODE *iput(MINODE *mip);
int mount_root(void);
void ls(char* pathname);
int cd(char *pathname);
char* permissionString(unsigned short mode);
char* lsInfo(INODE* ip, char* string);
int do_stat(char* pathname, struct stat* mystat);
void pwd(void);
int do_pwd(int ino);
int make_dir(char pathname[256]);
int my_mkdir(MINODE* pip, char* name);
int rm_dir(char* pathname);
int rm_child(MINODE* parent, char* my_name);
int do_touch(char *pathname);
int decFreeInodes(int dev);
int incFreeInodes(int dev);
int decFreeBlocks(int dev);
int incFreeBlocks(int dev);
int tst_bit(char *buf, int i);
int set_bit(char *buf, int i);
int clear_bit(char *buf, int i);
unsigned long ialloc(int dev);
unsigned long idalloc(int dev, int clear);
unsigned long balloc(int dev);
unsigned bdalloc(int dev, int clear);
int CommandToke(char part1[], char part2[]);
void PathToke(char pathname[], char part1[], char part2[], int length);
int linkToke(char part1[], char part2[]);
int unlink(char *pathname);
int my_symlink(char oldFileName[], char newFileName[]);
int readlink(char* pathname);
void menu(void);
int my_chmod(char newPermission[], char pathname[]);
int truncate(MINODE *mip);
int DTbdalloc(MINODE *mip);
int falloc(int check);
int fdalloc(OFT *oftptr);
int open_file(char pathname[], char mode[]);
int ModeConvert (char *mode);
int *FileCheck(MINODE *mip, int mode);
int close_file(int fd);
void pfd(void);
long read_file(int fd, int nbytes, int print);
long my_read(int fd, char *buf, int nbytes);
long write_file(int fd, char *text, int print);
long my_write(int fd, char *buf, int nbytes);
int cat_file(char *pathname);
long lseek_file(int fd, long newPosition);
